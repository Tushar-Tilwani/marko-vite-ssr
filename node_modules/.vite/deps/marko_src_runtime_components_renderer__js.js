import {
  require_index_browser as require_index_browser2
} from "./chunk-T27UHIJZ.js";
import "./chunk-BFAZ6O7V.js";
import "./chunk-DDL5ICIO.js";
import {
  require_copyProps
} from "./chunk-PWCIM3WU.js";
import "./chunk-NISPTXZL.js";
import {
  require_ComponentDef
} from "./chunk-EX4AML7V.js";
import {
  require_ComponentsContext
} from "./chunk-GIKHVMKU.js";
import "./chunk-2APR2CPO.js";
import "./chunk-3BN66U4C.js";
import "./chunk-AUY6IS4O.js";
import "./chunk-CNQJXT2F.js";
import {
  require_index_browser
} from "./chunk-XOFOD672.js";
import {
  __commonJS
} from "./chunk-VUNV25KB.js";

// node_modules/marko/src/node_modules/@internal/components-beginComponent/index-browser.js
var require_index_browser3 = __commonJS({
  "node_modules/marko/src/node_modules/@internal/components-beginComponent/index-browser.js"(exports, module) {
    var ComponentDef = require_ComponentDef();
    module.exports = function beginComponent(componentsContext, component, key, ownerComponentDef) {
      var componentId = component.id;
      var componentDef = componentsContext.___componentDef = new ComponentDef(
        component,
        componentId,
        componentsContext
      );
      componentsContext.___globalContext.___renderedComponentsById[componentId] = true;
      componentsContext.___components.push(componentDef);
      var out = componentsContext.___out;
      out.bc(component, key, ownerComponentDef && ownerComponentDef.___component);
      return componentDef;
    };
  }
});

// node_modules/marko/src/node_modules/@internal/components-endComponent/index-browser.js
var require_index_browser4 = __commonJS({
  "node_modules/marko/src/node_modules/@internal/components-endComponent/index-browser.js"(exports, module) {
    "use strict";
    module.exports = function endComponent(out) {
      out.ee();
    };
  }
});

// node_modules/marko/src/runtime/components/renderer.js
var require_renderer = __commonJS({
  "node_modules/marko/src/runtime/components/renderer.js"(exports, module) {
    var copyProps = require_copyProps();
    var beginComponent = require_index_browser3();
    var endComponent = require_index_browser4();
    var registry = require_index_browser2();
    var componentsUtil = require_index_browser();
    var componentLookup = componentsUtil.___componentLookup;
    var ComponentsContext = require_ComponentsContext();
    var getComponentsContext = ComponentsContext.___getComponentsContext;
    var isServer = componentsUtil.___isServer === true;
    var COMPONENT_BEGIN_ASYNC_ADDED_KEY = "$wa";
    function resolveComponentKey(key, parentComponentDef) {
      if (key[0] === "#") {
        return key.substring(1);
      } else {
        return parentComponentDef.id + "-" + parentComponentDef.___nextKey(key);
      }
    }
    function trackAsyncComponents(out) {
      if (out.isSync() || out.global[COMPONENT_BEGIN_ASYNC_ADDED_KEY]) {
        return;
      }
      out.on("beginAsync", handleBeginAsync);
      out.on("beginDetachedAsync", handleBeginDetachedAsync);
      out.global[COMPONENT_BEGIN_ASYNC_ADDED_KEY] = true;
    }
    function handleBeginAsync(event) {
      var parentOut = event.parentOut;
      var asyncOut = event.out;
      var componentsContext = parentOut.___components;
      if (componentsContext !== void 0) {
        asyncOut.___components = new ComponentsContext(asyncOut, componentsContext);
      }
      asyncOut.c(
        parentOut.___assignedComponentDef,
        parentOut.___assignedKey,
        parentOut.___assignedCustomEvents
      );
    }
    function handleBeginDetachedAsync(event) {
      var asyncOut = event.out;
      handleBeginAsync(event);
      asyncOut.on("beginAsync", handleBeginAsync);
      asyncOut.on("beginDetachedAsync", handleBeginDetachedAsync);
    }
    function createRendererFunc(templateRenderFunc, componentProps, renderingLogic) {
      var onInput = renderingLogic && renderingLogic.onInput;
      var typeName = componentProps.t;
      var isSplit = componentProps.s === true;
      var isImplicitComponent = componentProps.i === true;
      var shouldApplySplitMixins = renderingLogic && isSplit;
      if ("MARKO_DEBUG") {
        if (!componentProps.d) {
          throw new Error(
            "Component was compiled in a different NODE_ENV than the Marko runtime is using."
          );
        }
      } else if (componentProps.d) {
        throw new Error("Runtime/NODE_ENV Mismatch");
      }
      return function renderer(input, out) {
        trackAsyncComponents(out);
        var componentsContext = getComponentsContext(out);
        var globalComponentsContext = componentsContext.___globalContext;
        var component = globalComponentsContext.___rerenderComponent;
        var isRerender = component !== void 0;
        var id;
        var isExisting;
        var customEvents;
        var parentComponentDef = componentsContext.___componentDef;
        var ownerComponentDef = out.___assignedComponentDef;
        var ownerComponentId = ownerComponentDef && ownerComponentDef.id;
        var key = out.___assignedKey;
        if (component) {
          id = component.id;
          isExisting = true;
          globalComponentsContext.___rerenderComponent = null;
        } else {
          if (parentComponentDef) {
            customEvents = out.___assignedCustomEvents;
            if (key != null) {
              id = resolveComponentKey(key.toString(), parentComponentDef);
            } else {
              id = parentComponentDef.___nextComponentId();
            }
          } else {
            id = globalComponentsContext.___nextComponentId();
          }
        }
        if (isServer) {
          component = registry.___createComponent(
            renderingLogic,
            id,
            input,
            out,
            typeName,
            customEvents,
            ownerComponentId
          );
          input = component.___updatedInput;
        } else {
          if (!component) {
            if (isRerender && (component = componentLookup[id]) && component.___type !== typeName) {
              component.destroy();
              component = void 0;
            }
            if (component) {
              isExisting = true;
            } else {
              isExisting = false;
              component = registry.___createComponent(typeName, id);
              if (shouldApplySplitMixins === true) {
                shouldApplySplitMixins = false;
                var renderingLogicProps = typeof renderingLogic == "function" ? renderingLogic.prototype : renderingLogic;
                copyProps(renderingLogicProps, component.constructor.prototype);
              }
            }
            component.___updateQueued = true;
            if (customEvents) {
              component.___setCustomEvents(customEvents, ownerComponentId);
            }
            if (isExisting === false) {
              component.___emitCreate(input, out);
            }
            input = component.___setInput(input, onInput, out);
            if (isExisting === true) {
              if (component.___isDirty === false || component.shouldUpdate(input, component.___state) === false) {
                out.___preserveComponent(component);
                globalComponentsContext.___renderedComponentsById[id] = true;
                component.___reset();
                return;
              }
            }
          }
          component.___global = out.global;
          component.___emitRender(out);
        }
        var componentDef = beginComponent(
          componentsContext,
          component,
          key,
          ownerComponentDef,
          isSplit,
          isImplicitComponent
        );
        componentDef.___isExisting = isExisting;
        templateRenderFunc(
          input,
          out,
          componentDef,
          component,
          component.___rawState,
          out.global
        );
        endComponent(out, componentDef);
        componentsContext.___componentDef = parentComponentDef;
      };
    }
    module.exports = createRendererFunc;
    createRendererFunc.___resolveComponentKey = resolveComponentKey;
    createRendererFunc.___trackAsyncComponents = trackAsyncComponents;
  }
});
export default require_renderer();
//# sourceMappingURL=marko_src_runtime_components_renderer__js.js.map
